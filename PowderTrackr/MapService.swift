import Amplify
import Combine
import GoogleMaps
import UIKit

public protocol MapServiceProtocol: AnyObject {
    var trackingPublisher: AnyPublisher<TrackedPath?, Never> { get }
    var trackedPathPublisher: AnyPublisher<TrackedPathModel?, Never> { get }
    var sharedPathPublisher: AnyPublisher<TrackedPathModel?, Never> { get }
    var raceCreationStatePublisher: AnyPublisher<RaceCreationState, Never> { get }
    var racesPublisher: AnyPublisher<[Race], Never> { get }

    func updateTrackedPath(_ trackedPath: TrackedPath) async
    func updateTrack(_ trackedPath: TrackedPath, _ shared: Bool) async
    func shareTrack(_ trackedPath: TrackedPath, _ friend: String) async
    func removeTrackedPath(_ trackedPath: TrackedPath) async
    func removeSharedTrackedPath(_ trackedPath: TrackedPath) async
    func queryTrackedPaths() async
    func querySharedPaths() async
    func sendCurrentlyTracked(_ trackedPath: TrackedPath) async
    func changeRaceCreationState(_ raceCreationState: RaceCreationState)
    func createRace(_ markers: [GMSMarker], _ name: String) async
    func queryRaces() async
    func sendRaceRun()
    func initRacesStartingData() async
    func updateRace(_ race: Race, _ newRace: Race) async
    func deleteRace(_ race: Race) async
}

final class MapService {
    private let tracking: CurrentValueSubject<TrackedPath?, Never> = .init(nil)
    private let trackedPathModel: CurrentValueSubject<TrackedPathModel?, Never> = .init(nil)
    private let sharedPathModel: CurrentValueSubject<TrackedPathModel?, Never> = .init(nil)
    private let raceCreationState: CurrentValueSubject<RaceCreationState, Never> = .init(.not)
    private let races: CurrentValueSubject<[Race], Never> = .init([])
    private var cancellables: Set<AnyCancellable> = []
}

extension MapService: MapServiceProtocol {
    var raceCreationStatePublisher: AnyPublisher<RaceCreationState, Never> {
        raceCreationState
            .receive(on: DispatchQueue.main)
            .eraseToAnyPublisher()
    }

    func sendCurrentlyTracked(_ trackedPath: TrackedPath) async {
        tracking.send(trackedPath)
    }

    var trackingPublisher: AnyPublisher<TrackedPath?, Never> {
        tracking
            .receive(on: DispatchQueue.main)
            .eraseToAnyPublisher()
    }

    var trackedPathPublisher: AnyPublisher<TrackedPathModel?, Never> {
        trackedPathModel
            .receive(on: DispatchQueue.main)
            .eraseToAnyPublisher()
    }

    var sharedPathPublisher: AnyPublisher<TrackedPathModel?, Never> {
        sharedPathModel
            .receive(on: DispatchQueue.main)
            .eraseToAnyPublisher()
    }

    var racesPublisher: AnyPublisher<[Race], Never> {
        races
            .receive(on: DispatchQueue.main)
            .eraseToAnyPublisher()
    }

    func shareTrack(_ trackedPath: TrackedPath, _ friend: String) async {
        do {
            let tracksQueryResults = try await Amplify.API.query(request: .list(UserTrackedPaths.self))
            let result = try tracksQueryResults.get().elements.map { model in
                TrackedPathModel(id: model.id, tracks: model.sharedTracks)
            }

            let resultTracks = try tracksQueryResults.get().elements.map { model in
                TrackedPathModel(id: model.id, tracks: model.tracks)
            }

            let model = result.first { item in
                item.id == friend
            }

            let resultModel = resultTracks.first { item in
                item.id == friend
            }

            model?.tracks?.append(trackedPath)

            let newData = UserTrackedPaths(id: model?.id ?? "", tracks: resultModel?.tracks, sharedTracks: model?.tracks)

            _ = try await Amplify.API.mutate(request: .update(newData))
        } catch let error as APIError {
            print("Failed to shareTrack: \(error)")
        } catch {
            print("Unexpected error while calling create API : \(error)")
        }
    }

    func queryTrackedPaths() async {
        do {
            let queryResult = try await Amplify.API.query(request: .list(UserTrackedPaths.self))

            let user = try await Amplify.Auth.getCurrentUser()

            let result = try queryResult.get().elements.map { model in
                TrackedPathModel(from: model)
            }

            let currentPaths = result.first { $0.id == user.userId }
          //  print(currentPaths?.tracks)
            trackedPathModel.send(currentPaths)
        } catch {
            print("Can not retrieve queryTrackedPaths : error \(error)")
        }
    }

    func querySharedPaths() async {
        do {
            let queryResult = try await Amplify.API.query(request: .list(UserTrackedPaths.self))

            let user = try await Amplify.Auth.getCurrentUser()

            let result = try queryResult.get().elements.map { model in
                TrackedPathModel(id: model.id, tracks: model.sharedTracks)
            }
            let sharedPaths = result.first { $0.id == user.userId }

            sharedPathModel.send(sharedPaths)
        } catch {
            print("Can not retrieve querySharedPaths : error \(error)")
        }
    }

    func updateTrackedPath(_ trackedPath: TrackedPath) async {
        do {
            let user = try await Amplify.Auth.getCurrentUser()
            let tracksQueryResults = try await Amplify.API.query(request: .list(UserTrackedPaths.self))
            let tracksQueryResultsMapped = try tracksQueryResults.get().elements.map { item in
                TrackedPathModel(from: item)
            }
            let sharedTracksQueryResultsMapped = try tracksQueryResults.get().elements.map { item in
                return TrackedPathModel(id: item.id, tracks: item.sharedTracks)
            }

            var tracks = tracksQueryResultsMapped.first { item in
                item.id == user.userId
            }?.tracks

            var sharedTracks = sharedTracksQueryResultsMapped.first { item in
                item.id == user.userId
            }?.tracks

            tracks?.append(trackedPath)

            let data = UserTrackedPaths(id: user.userId, tracks: tracks, sharedTracks: sharedTracks)
            _ = try await Amplify.API.mutate(request: .update(data))

            await queryTrackedPaths()
        } catch let error as APIError {
            print("Failed to updateTrackedPath: \(error)")
        } catch {
            print("Unexpected error while calling create API : \(error)")
        }
    }

    func updateTrack(_ trackedPath: TrackedPath, _ shared: Bool) async {
        do {
            let user = try await Amplify.Auth.getCurrentUser()
            let tracksQueryResults = try await Amplify.API.query(request: .list(UserTrackedPaths.self))

            let sharedTracksQueryResultsMapped = try tracksQueryResults.get().elements.map { item in
                return TrackedPathModel(id: item.id, tracks: item.sharedTracks)
            }

            let tracksQueryResultsMapped = try tracksQueryResults.get().elements.map { item in
                TrackedPathModel(from: item)
            }

            var tracks = tracksQueryResultsMapped.first { item in
                item.id == user.userId
            }?.tracks

            var sharedTracks = sharedTracksQueryResultsMapped.first { item in
                item.id == user.userId
            }?.tracks

            if shared {
                let id = sharedTracks?.firstIndex { $0.id == trackedPath.id } ?? 0
                sharedTracks?[id] = trackedPath
            } else {
                let id = tracks?.firstIndex { $0.id == trackedPath.id } ?? 0
                tracks?[id] = trackedPath
            }

            let data = UserTrackedPaths(id: user.userId, tracks: tracks, sharedTracks: sharedTracks)
            _ = try await Amplify.API.mutate(request: .update(data))

            if shared {
                await querySharedPaths()
            } else {
                await queryTrackedPaths()
            }
        } catch let error as APIError {
            print("Failed to updateTrack: \(error)")
        } catch {
            print("Unexpected error while calling create API : \(error)")
        }
    }

    func removeTrackedPath(_ trackedPath: TrackedPath) async {
        do {
            let user = try await Amplify.Auth.getCurrentUser()
            let tracksQueryResults = try await Amplify.API.query(request: .list(UserTrackedPaths.self))
            let tracksQueryResultsMapped = try tracksQueryResults.get().elements.map { item in
                TrackedPathModel(from: item)
            }

            var tracks = tracksQueryResultsMapped.first { item in
                item.id == user.userId
            }?.tracks

            tracks?.removeAll { $0.id == trackedPath.id }

            let trackModel = TrackedPathModel(id: user.userId, tracks: tracks)
            guard let data = trackModel.data else { return }
            _ = try await Amplify.API.mutate(request: .update(data))

            await queryTrackedPaths()
        } catch let error as APIError {
            print("Failed to removeTrackedPath: \(error)")
        } catch {
            print("Unexpected error while calling create API : \(error)")
        }
    }

    func removeSharedTrackedPath(_ trackedPath: TrackedPath) async {
        do {
            let user = try await Amplify.Auth.getCurrentUser()

            let tracksQueryResults = try await Amplify.API.query(request: .list(UserTrackedPaths.self))
            let tracksQueryResultsMapped = try tracksQueryResults.get().elements.map { item in
                TrackedPathModel(from: item)
            }

            let sharedTracksQueryResultsMapped = try tracksQueryResults.get().elements.map { item in
                TrackedPathModel(id: item.id, tracks: item.sharedTracks)
            }

            var tracks = tracksQueryResultsMapped.first { item in
                item.id == user.userId
            }?.tracks

            var sharedTracks = sharedTracksQueryResultsMapped.first { item in
                item.id == user.userId
            }?.tracks

            sharedTracks?.removeAll { $0.id == trackedPath.id }

            let newData = UserTrackedPaths(id: user.userId, tracks: tracks, sharedTracks: sharedTracks)

            _ = try await Amplify.API.mutate(request: .update(newData))

            await querySharedPaths()
        } catch let error as APIError {
            print("Failed to removeSharedTrackedPath: \(error)")
        } catch {
            print("Unexpected error while calling create API : \(error)")
        }
    }

    func changeRaceCreationState(_ raceCreationState: RaceCreationState) {
        self.raceCreationState.send(raceCreationState)
    }

    func createRace(_ markers: [GMSMarker], _ name: String) async {
        print(markers, name)
        raceCreationState.send(.not)
        do {
            let dateFormatter = DateFormatter()
            dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
            let xCoords: [Double]? = markers.map { $0.position.latitude }
            let yCoords: [Double]? = markers.map { $0.position.longitude }
            let Race = Race(name: name, date: dateFormatter.string(from: Date()), shortestTime: 0.0, shortestDistance: 0.0, xCoords: xCoords ?? [], yCoords: yCoords ?? [], participants: [])


            _ = try await Amplify.API.mutate(request: .create(Race))
            await queryRaces()
        } catch let error as APIError {
            print("Failed to createRace: \(error)")
        } catch {
            print("Unexpected error while calling create API : \(error)")
        }
    }

    func deleteRace(_ race: Race) async {
        do {
            _ = try await Amplify.API.mutate(request: .delete(race))
            await queryRaces()
        } catch {
            print("Can not retrieve deleteRace : error \(error)")
        }
    }

    func queryRaces() async {
        do {
            let user = try await Amplify.Auth.getCurrentUser()
            let queryResult = try await Amplify.API.query(request: .list(Race.self))

            let result = try queryResult.get().elements

            let filteredResult = result.filter { race in
                guard let participants = race.participants else { return false }
                if participants.contains(user.userId) {
                    return true
                } else {
                    return false
                }
            }
            races.send(filteredResult)
        } catch {
            print("Can not retrieve queryRaces : error \(error)")
        }
    }

    func updateRace(_ race: Race, _ newRace: Race) async {
        do {
            var array = races.value
            guard let index = array.firstIndex(of: race) else { return }
            array[index] = newRace

            _ = try await Amplify.API.mutate(request: .update(array[index]))
            await queryRaces()
        } catch let error as APIError {
            print("Failed to updateRace: \(error)")
        } catch {
            print("Unexpected error while calling create API : \(error)")
        }
    }

    func initRacesStartingData() async {
        do {
            let races =  [
                Race(name: "Race 123", date: "2023-10-10 20:12:55", shortestTime: 560, shortestDistance: 10431, xCoords: [47.1986, 47.19704469885838], yCoords: [17.60286, 17.60162422071103], tracks: [TrackedPath(id: "123", name: "Run123", startDate: "2023-10-09 20:45:55", endDate: "2023-10-09 20:52:55", xCoords: [47.1986, 47.198594673626225, 47.19858934725245, 47.198584020878684, 47.19857869450491, 47.198573368131136, 47.19856804175736, 47.19856271538359, 47.19855738900982, 47.19855206263605, 47.19854673626227, 47.1985414098885, 47.198536083514725, 47.19853075714095, 47.198525430767184, 47.19852010439341, 47.198514778019636, 47.19850945164586, 47.19850412527209, 47.19849879889832, 47.19849347252455, 47.19848814615077, 47.198482819777, 47.198477493403225, 47.19847216702946, 47.19846684065568, 47.19846151428191, 47.198456187908135, 47.19845086153436, 47.198445535160594, 47.19844020878682, 47.198434882413046, 47.19842955603927, 47.1984242296655, 47.19841890329173, 47.19841357691796, 47.19840825054418, 47.19840292417041, 47.198397597796635, 47.19839227142286, 47.198386945049094, 47.19838161867532, 47.198376292301546, 47.19837096592777, 47.198365639554, 47.19836031318023, 47.19835498680646, 47.19834966043268, 47.19834433405891, 47.198339007685135, 47.19833368131137, 47.198328354937594, 47.19832302856382, 47.198317702190046, 47.19831237581627, 47.198307049442505, 47.19830172306873, 47.19829639669496, 47.19829107032118, 47.19828574394741, 47.198280417573635, 47.19827509119987, 47.198269764826094, 47.19826443845232, 47.198259112078546, 47.19825378570477, 47.198248459331005, 47.19824313295723, 47.19823780658346, 47.19823248020968, 47.19822715383591, 47.19822182746214, 47.19821650108837, 47.198211174714594, 47.19820584834082, 47.198200521967046, 47.19819519559328, 47.198189869219505, 47.19818454284573, 47.19817921647196, 47.19817389009818, 47.198168563724415, 47.19816323735064, 47.19815791097687, 47.19815258460309, 47.19814725822932, 47.198141931855545, 47.19813660548178, 47.198131279108004, 47.19812595273423, 47.198120626360456, 47.19811529998668, 47.198109973612915, 47.19810464723914, 47.19809932086537, 47.19809399449159, 47.19808866811782, 47.19808334174405, 47.19807801537028, 47.198072688996504, 47.19806736262273, 47.198062036248956, 47.19805670987519, 47.198051383501415, 47.19804605712764, 47.19804073075387, 47.19803540438009, 47.19803007800632, 47.19802475163255, 47.19801942525878, 47.198014098885004, 47.19800877251123, 47.198003446137456, 47.19799811976369, 47.197992793389915, 47.19798746701614, 47.19798214064237, 47.19797681426859, 47.197971487894826, 47.19796616152105, 47.19796083514728, 47.197955508773504, 47.19795018239973, 47.19794485602596, 47.19793952965219, 47.197934203278415, 47.19792887690464, 47.19792355053087, 47.1979182241571, 47.197912897783326, 47.19790757140955, 47.19790224503578, 47.197896918662, 47.19789159228823, 47.19788626591446, 47.19788093954069, 47.197875613166914, 47.19787028679314, 47.197864960419366, 47.1978596340456, 47.197854307671825, 47.19784898129805, 47.19784365492428, 47.1978383285505, 47.197833002176736, 47.19782767580296, 47.19782234942919, 47.197817023055414, 47.19781169668164, 47.19780637030787, 47.1978010439341, 47.197795717560325, 47.19779039118655, 47.19778506481278, 47.197779738439, 47.197774412065236, 47.19776908569146, 47.19776375931769, 47.197758432943914, 47.19775310657014, 47.19774778019637, 47.1977424538226, 47.197737127448825, 47.19773180107505, 47.19772647470128, 47.19772114832751, 47.197715821953736, 47.19771049557996, 47.19770516920619, 47.197699842832414, 47.19769451645865, 47.19768919008487, 47.1976838637111, 47.197678537337325, 47.19767321096355, 47.197667884589784, 47.19766255821601, 47.197657231842236, 47.19765190546846, 47.19764657909469, 47.19764125272091, 47.19763592634715, 47.19763059997337, 47.1976252735996, 47.197619947225824, 47.19761462085205, 47.19760929447828, 47.19760396810451, 47.197598641730735, 47.19759331535696, 47.19758798898319, 47.19758266260942, 47.197577336235646, 47.19757200986187, 47.1975666834881, 47.197561357114324, 47.19755603074056, 47.19755070436678, 47.19754537799301, 47.197540051619235, 47.19753472524546, 47.197529398871694, 47.19752407249792, 47.197518746124146, 47.19751341975037, 47.1975080933766, 47.197502767002824, 47.19749744062906, 47.19749211425528, 47.19748678788151, 47.197481461507735, 47.19747613513396, 47.197470808760194, 47.19746548238642, 47.197460156012646, 47.19745482963887, 47.1974495032651, 47.19744417689133, 47.19743885051756, 47.19743352414378, 47.19742819777001, 47.197422871396235, 47.19741754502247, 47.197412218648694, 47.19740689227492, 47.197401565901146, 47.19739623952737, 47.1973909131536, 47.19738558677983, 47.19738026040606, 47.19737493403228, 47.19736960765851, 47.197364281284734, 47.19735895491097, 47.19735362853719, 47.19734830216342, 47.197342975789645, 47.19733764941587, 47.197332323042104, 47.19732699666833, 47.197321670294556, 47.19731634392078, 47.19731101754701, 47.19730569117324, 47.19730036479947, 47.19729503842569, 47.19728971205192, 47.197284385678145, 47.19727905930438, 47.197273732930604, 47.19726840655683, 47.197263080183056, 47.19725775380928, 47.19725242743551, 47.19724710106174, 47.19724177468797, 47.19723644831419, 47.19723112194042, 47.197225795566645, 47.19722046919288, 47.197215142819104, 47.19720981644533, 47.197204490071556, 47.19719916369778, 47.197193837324015, 47.19718851095024, 47.19718318457647, 47.19717785820269, 47.19717253182892, 47.19716720545515, 47.19716187908138, 47.197156552707604, 47.19715122633383, 47.197145899960056, 47.19714057358628, 47.197135247212515, 47.19712992083874, 47.19712459446497, 47.19711926809119, 47.19711394171742, 47.19710861534365, 47.19710328896988, 47.197097962596104, 47.19709263622233, 47.197087309848555, 47.19708198347479, 47.197076657101015, 47.19707133072724, 47.197066004353466, 47.19706067797969, 47.197055351605925, 47.19705002523215, 47.19704469885838], yCoords: [17.60286, 17.60285576787915, 17.602851535758294, 17.602847303637443, 17.60284307151659, 17.602838839395737, 17.602834607274882, 17.60283037515403, 17.60282614303318, 17.602821910912326, 17.602817678791475, 17.60281344667062, 17.60280921454977, 17.602804982428914, 17.602800750308063, 17.602796518187212, 17.602792286066357, 17.602788053945506, 17.60278382182465, 17.6027795897038, 17.602775357582946, 17.602771125462095, 17.602766893341244, 17.60276266122039, 17.602758429099538, 17.602754196978683, 17.602749964857832, 17.602745732736977, 17.602741500616126, 17.60273726849527, 17.60273303637442, 17.60272880425357, 17.602724572132715, 17.602720340011864, 17.60271610789101, 17.602711875770158, 17.602707643649303, 17.602703411528452, 17.6026991794076, 17.602694947286746, 17.602690715165895, 17.60268648304504, 17.60268225092419, 17.602678018803335, 17.602673786682484, 17.602669554561633, 17.602665322440778, 17.602661090319927, 17.602656858199072, 17.60265262607822, 17.602648393957367, 17.602644161836515, 17.602639929715664, 17.60263569759481, 17.60263146547396, 17.602627233353104, 17.602623001232253, 17.602618769111398, 17.602614536990547, 17.602610304869696, 17.60260607274884, 17.60260184062799, 17.602597608507136, 17.602593376386285, 17.60258914426543, 17.60258491214458, 17.602580680023728, 17.602576447902873, 17.602572215782022, 17.602567983661167, 17.602563751540316, 17.60255951941946, 17.60255528729861, 17.602551055177756, 17.602546823056905, 17.602542590936054, 17.6025383588152, 17.602534126694348, 17.602529894573493, 17.602525662452642, 17.602521430331787, 17.602517198210936, 17.602512966090085, 17.60250873396923, 17.60250450184838, 17.602500269727525, 17.602496037606674, 17.60249180548582, 17.602487573364968, 17.602483341244117, 17.602479109123262, 17.60247487700241, 17.602470644881556, 17.602466412760705, 17.60246218063985, 17.602457948519, 17.60245371639815, 17.602449484277294, 17.602445252156443, 17.602441020035588, 17.602436787914737, 17.602432555793882, 17.60242832367303, 17.60242409155218, 17.602419859431325, 17.602415627310474, 17.60241139518962, 17.60240716306877, 17.602402930947914, 17.602398698827063, 17.60239446670621, 17.602390234585357, 17.602386002464506, 17.60238177034365, 17.6023775382228, 17.602373306101946, 17.602369073981095, 17.60236484186024, 17.60236060973939, 17.602356377618538, 17.602352145497683, 17.602347913376832, 17.602343681255977, 17.602339449135126, 17.60233521701427, 17.60233098489342, 17.60232675277257, 17.602322520651715, 17.602318288530864, 17.60231405641001, 17.602309824289158, 17.602305592168303, 17.602301360047452, 17.6022971279266, 17.602292895805746, 17.602288663684895, 17.60228443156404, 17.60228019944319, 17.602275967322335, 17.602271735201484, 17.602267503080633, 17.602263270959778, 17.602259038838927, 17.602254806718072, 17.60225057459722, 17.602246342476366, 17.602242110355515, 17.602237878234664, 17.60223364611381, 17.60222941399296, 17.602225181872104, 17.602220949751253, 17.602216717630398, 17.602212485509547, 17.602208253388696, 17.60220402126784, 17.60219978914699, 17.602195557026135, 17.602191324905284, 17.60218709278443, 17.60218286066358, 17.602178628542728, 17.602174396421873, 17.60217016430102, 17.602165932180167, 17.602161700059316, 17.60215746793846, 17.60215323581761, 17.602149003696756, 17.602144771575905, 17.602140539455053, 17.6021363073342, 17.602132075213348, 17.602127843092493, 17.602123610971642, 17.602119378850787, 17.602115146729936, 17.602110914609085, 17.60210668248823, 17.60210245036738, 17.602098218246525, 17.602093986125674, 17.60208975400482, 17.602085521883968, 17.602081289763117, 17.602077057642262, 17.60207282552141, 17.602068593400556, 17.602064361279705, 17.60206012915885, 17.602055897038, 17.60205166491715, 17.602047432796294, 17.602043200675443, 17.602038968554588, 17.602034736433737, 17.602030504312882, 17.60202627219203, 17.60202204007118, 17.602017807950325, 17.602013575829474, 17.60200934370862, 17.60200511158777, 17.602000879466914, 17.601996647346063, 17.60199241522521, 17.601988183104357, 17.601983950983506, 17.60197971886265, 17.6019754867418, 17.601971254620945, 17.601967022500094, 17.60196279037924, 17.60195855825839, 17.601954326137538, 17.601950094016683, 17.60194586189583, 17.601941629774977, 17.601937397654126, 17.60193316553327, 17.60192893341242, 17.60192470129157, 17.601920469170715, 17.601916237049863, 17.60191200492901, 17.601907772808158, 17.601903540687303, 17.601899308566452, 17.6018950764456, 17.601890844324746, 17.601886612203895, 17.60188238008304, 17.60187814796219, 17.601873915841335, 17.601869683720484, 17.601865451599632, 17.601861219478778, 17.601856987357927, 17.601852755237072, 17.60184852311622, 17.601844290995366, 17.601840058874515, 17.601835826753664, 17.60183159463281, 17.60182736251196, 17.601823130391104, 17.601818898270253, 17.601814666149398, 17.601810434028547, 17.601806201907696, 17.60180196978684, 17.60179773766599, 17.601793505545135, 17.601789273424284, 17.60178504130343, 17.60178080918258, 17.601776577061724, 17.601772344940873, 17.60176811282002, 17.601763880699167, 17.601759648578316, 17.60175541645746, 17.60175118433661, 17.601746952215755, 17.601742720094904, 17.601738487974053, 17.6017342558532, 17.601730023732348, 17.601725791611493, 17.60172155949064, 17.601717327369787, 17.601713095248936, 17.601708863128085, 17.60170463100723, 17.60170039888638, 17.601696166765525, 17.601691934644673, 17.60168770252382, 17.601683470402968, 17.601679238282117, 17.601675006161262, 17.60167077404041, 17.601666541919556, 17.601662309798705, 17.60165807767785, 17.601653845557, 17.601649613436148, 17.601645381315294, 17.601641149194442, 17.601636917073588, 17.601632684952737, 17.601628452831882, 17.60162422071103], tracking: false), TrackedPath(id: "123", name: "Run123", startDate: "2023-10-09 20:35:55", endDate: "2023-10-09 20:40:55", xCoords: [47.1986, 47.198594673626225, 47.19858934725245, 47.198584020878684, 47.19857869450491, 47.198573368131136, 47.19856804175736, 47.19856271538359, 47.19855738900982, 47.19855206263605, 47.19854673626227, 47.1985414098885, 47.198536083514725, 47.19853075714095, 47.198525430767184, 47.19852010439341, 47.198514778019636, 47.19850945164586, 47.19850412527209, 47.19849879889832, 47.19849347252455, 47.19848814615077, 47.198482819777, 47.198477493403225, 47.19847216702946, 47.19846684065568, 47.19846151428191, 47.198456187908135, 47.19845086153436, 47.198445535160594, 47.19844020878682, 47.198434882413046, 47.19842955603927, 47.1984242296655, 47.19841890329173, 47.19841357691796, 47.19840825054418, 47.19840292417041, 47.198397597796635, 47.19839227142286, 47.198386945049094, 47.19838161867532, 47.198376292301546, 47.19837096592777, 47.198365639554, 47.19836031318023, 47.19835498680646, 47.19834966043268, 47.19834433405891, 47.198339007685135, 47.19833368131137, 47.198328354937594, 47.19832302856382, 47.198317702190046, 47.19831237581627, 47.198307049442505, 47.19830172306873, 47.19829639669496, 47.19829107032118, 47.19828574394741, 47.198280417573635, 47.19827509119987, 47.198269764826094, 47.19826443845232, 47.198259112078546, 47.19825378570477, 47.198248459331005, 47.19824313295723, 47.19823780658346, 47.19823248020968, 47.19822715383591, 47.19822182746214, 47.19821650108837, 47.198211174714594, 47.19820584834082, 47.198200521967046, 47.19819519559328, 47.198189869219505, 47.19818454284573, 47.19817921647196, 47.19817389009818, 47.198168563724415, 47.19816323735064, 47.19815791097687, 47.19815258460309, 47.19814725822932, 47.198141931855545, 47.19813660548178, 47.198131279108004, 47.19812595273423, 47.198120626360456, 47.19811529998668, 47.198109973612915, 47.19810464723914, 47.19809932086537, 47.19809399449159, 47.19808866811782, 47.19808334174405, 47.19807801537028, 47.198072688996504, 47.19806736262273, 47.198062036248956, 47.19805670987519, 47.198051383501415, 47.19804605712764, 47.19804073075387, 47.19803540438009, 47.19803007800632, 47.19802475163255, 47.19801942525878, 47.198014098885004, 47.19800877251123, 47.198003446137456, 47.19799811976369, 47.197992793389915, 47.19798746701614, 47.19798214064237, 47.19797681426859, 47.197971487894826, 47.19796616152105, 47.19796083514728, 47.197955508773504, 47.19795018239973, 47.19794485602596, 47.19793952965219, 47.197934203278415, 47.19792887690464, 47.19792355053087, 47.1979182241571, 47.197912897783326, 47.19790757140955, 47.19790224503578, 47.197896918662, 47.19789159228823, 47.19788626591446, 47.19788093954069, 47.197875613166914, 47.19787028679314, 47.197864960419366, 47.1978596340456, 47.197854307671825, 47.19784898129805, 47.19784365492428, 47.1978383285505, 47.197833002176736, 47.19782767580296, 47.19782234942919, 47.197817023055414, 47.19781169668164, 47.19780637030787, 47.1978010439341, 47.197795717560325, 47.19779039118655, 47.19778506481278, 47.197779738439, 47.197774412065236, 47.19776908569146, 47.19776375931769, 47.197758432943914, 47.19775310657014, 47.19774778019637, 47.1977424538226, 47.197737127448825, 47.19773180107505, 47.19772647470128, 47.19772114832751, 47.197715821953736, 47.19771049557996, 47.19770516920619, 47.197699842832414, 47.19769451645865, 47.19768919008487, 47.1976838637111, 47.197678537337325, 47.19767321096355, 47.197667884589784, 47.19766255821601, 47.197657231842236, 47.19765190546846, 47.19764657909469, 47.19764125272091, 47.19763592634715, 47.19763059997337, 47.1976252735996, 47.197619947225824, 47.19761462085205, 47.19760929447828, 47.19760396810451, 47.197598641730735, 47.19759331535696, 47.19758798898319, 47.19758266260942, 47.197577336235646, 47.19757200986187, 47.1975666834881, 47.197561357114324, 47.19755603074056, 47.19755070436678, 47.19754537799301, 47.197540051619235, 47.19753472524546, 47.197529398871694, 47.19752407249792, 47.197518746124146, 47.19751341975037, 47.1975080933766, 47.197502767002824, 47.19749744062906, 47.19749211425528, 47.19748678788151, 47.197481461507735, 47.19747613513396, 47.197470808760194, 47.19746548238642, 47.197460156012646, 47.19745482963887, 47.1974495032651, 47.19744417689133, 47.19743885051756, 47.19743352414378, 47.19742819777001, 47.197422871396235, 47.19741754502247, 47.197412218648694, 47.19740689227492, 47.197401565901146, 47.19739623952737, 47.1973909131536, 47.19738558677983, 47.19738026040606, 47.19737493403228, 47.19736960765851, 47.197364281284734, 47.19735895491097, 47.19735362853719, 47.19734830216342, 47.197342975789645, 47.19733764941587, 47.197332323042104, 47.19732699666833, 47.197321670294556, 47.19731634392078, 47.19731101754701, 47.19730569117324, 47.19730036479947, 47.19729503842569, 47.19728971205192, 47.197284385678145, 47.19727905930438, 47.197273732930604, 47.19726840655683, 47.197263080183056, 47.19725775380928, 47.19725242743551, 47.19724710106174, 47.19724177468797, 47.19723644831419, 47.19723112194042, 47.197225795566645, 47.19722046919288, 47.197215142819104, 47.19720981644533, 47.197204490071556, 47.19719916369778, 47.197193837324015, 47.19718851095024, 47.19718318457647, 47.19717785820269, 47.19717253182892, 47.19716720545515, 47.19716187908138, 47.197156552707604, 47.19715122633383, 47.197145899960056, 47.19714057358628, 47.197135247212515, 47.19712992083874, 47.19712459446497, 47.19711926809119, 47.19711394171742, 47.19710861534365, 47.19710328896988, 47.197097962596104, 47.19709263622233, 47.197087309848555, 47.19708198347479, 47.197076657101015, 47.19707133072724, 47.197066004353466, 47.19706067797969, 47.197055351605925, 47.19705002523215, 47.19704469885838], yCoords: [17.60286, 17.60285576787915, 17.602851535758294, 17.602847303637443, 17.60284307151659, 17.602838839395737, 17.602834607274882, 17.60283037515403, 17.60282614303318, 17.602821910912326, 17.602817678791475, 17.60281344667062, 17.60280921454977, 17.602804982428914, 17.602800750308063, 17.602796518187212, 17.602792286066357, 17.602788053945506, 17.60278382182465, 17.6027795897038, 17.602775357582946, 17.602771125462095, 17.602766893341244, 17.60276266122039, 17.602758429099538, 17.602754196978683, 17.602749964857832, 17.602745732736977, 17.602741500616126, 17.60273726849527, 17.60273303637442, 17.60272880425357, 17.602724572132715, 17.602720340011864, 17.60271610789101, 17.602711875770158, 17.602707643649303, 17.602703411528452, 17.6026991794076, 17.602694947286746, 17.602690715165895, 17.60268648304504, 17.60268225092419, 17.602678018803335, 17.602673786682484, 17.602669554561633, 17.602665322440778, 17.602661090319927, 17.602656858199072, 17.60265262607822, 17.602648393957367, 17.602644161836515, 17.602639929715664, 17.60263569759481, 17.60263146547396, 17.602627233353104, 17.602623001232253, 17.602618769111398, 17.602614536990547, 17.602610304869696, 17.60260607274884, 17.60260184062799, 17.602597608507136, 17.602593376386285, 17.60258914426543, 17.60258491214458, 17.602580680023728, 17.602576447902873, 17.602572215782022, 17.602567983661167, 17.602563751540316, 17.60255951941946, 17.60255528729861, 17.602551055177756, 17.602546823056905, 17.602542590936054, 17.6025383588152, 17.602534126694348, 17.602529894573493, 17.602525662452642, 17.602521430331787, 17.602517198210936, 17.602512966090085, 17.60250873396923, 17.60250450184838, 17.602500269727525, 17.602496037606674, 17.60249180548582, 17.602487573364968, 17.602483341244117, 17.602479109123262, 17.60247487700241, 17.602470644881556, 17.602466412760705, 17.60246218063985, 17.602457948519, 17.60245371639815, 17.602449484277294, 17.602445252156443, 17.602441020035588, 17.602436787914737, 17.602432555793882, 17.60242832367303, 17.60242409155218, 17.602419859431325, 17.602415627310474, 17.60241139518962, 17.60240716306877, 17.602402930947914, 17.602398698827063, 17.60239446670621, 17.602390234585357, 17.602386002464506, 17.60238177034365, 17.6023775382228, 17.602373306101946, 17.602369073981095, 17.60236484186024, 17.60236060973939, 17.602356377618538, 17.602352145497683, 17.602347913376832, 17.602343681255977, 17.602339449135126, 17.60233521701427, 17.60233098489342, 17.60232675277257, 17.602322520651715, 17.602318288530864, 17.60231405641001, 17.602309824289158, 17.602305592168303, 17.602301360047452, 17.6022971279266, 17.602292895805746, 17.602288663684895, 17.60228443156404, 17.60228019944319, 17.602275967322335, 17.602271735201484, 17.602267503080633, 17.602263270959778, 17.602259038838927, 17.602254806718072, 17.60225057459722, 17.602246342476366, 17.602242110355515, 17.602237878234664, 17.60223364611381, 17.60222941399296, 17.602225181872104, 17.602220949751253, 17.602216717630398, 17.602212485509547, 17.602208253388696, 17.60220402126784, 17.60219978914699, 17.602195557026135, 17.602191324905284, 17.60218709278443, 17.60218286066358, 17.602178628542728, 17.602174396421873, 17.60217016430102, 17.602165932180167, 17.602161700059316, 17.60215746793846, 17.60215323581761, 17.602149003696756, 17.602144771575905, 17.602140539455053, 17.6021363073342, 17.602132075213348, 17.602127843092493, 17.602123610971642, 17.602119378850787, 17.602115146729936, 17.602110914609085, 17.60210668248823, 17.60210245036738, 17.602098218246525, 17.602093986125674, 17.60208975400482, 17.602085521883968, 17.602081289763117, 17.602077057642262, 17.60207282552141, 17.602068593400556, 17.602064361279705, 17.60206012915885, 17.602055897038, 17.60205166491715, 17.602047432796294, 17.602043200675443, 17.602038968554588, 17.602034736433737, 17.602030504312882, 17.60202627219203, 17.60202204007118, 17.602017807950325, 17.602013575829474, 17.60200934370862, 17.60200511158777, 17.602000879466914, 17.601996647346063, 17.60199241522521, 17.601988183104357, 17.601983950983506, 17.60197971886265, 17.6019754867418, 17.601971254620945, 17.601967022500094, 17.60196279037924, 17.60195855825839, 17.601954326137538, 17.601950094016683, 17.60194586189583, 17.601941629774977, 17.601937397654126, 17.60193316553327, 17.60192893341242, 17.60192470129157, 17.601920469170715, 17.601916237049863, 17.60191200492901, 17.601907772808158, 17.601903540687303, 17.601899308566452, 17.6018950764456, 17.601890844324746, 17.601886612203895, 17.60188238008304, 17.60187814796219, 17.601873915841335, 17.601869683720484, 17.601865451599632, 17.601861219478778, 17.601856987357927, 17.601852755237072, 17.60184852311622, 17.601844290995366, 17.601840058874515, 17.601835826753664, 17.60183159463281, 17.60182736251196, 17.601823130391104, 17.601818898270253, 17.601814666149398, 17.601810434028547, 17.601806201907696, 17.60180196978684, 17.60179773766599, 17.601793505545135, 17.601789273424284, 17.60178504130343, 17.60178080918258, 17.601776577061724, 17.601772344940873, 17.60176811282002, 17.601763880699167, 17.601759648578316, 17.60175541645746, 17.60175118433661, 17.601746952215755, 17.601742720094904, 17.601738487974053, 17.6017342558532, 17.601730023732348, 17.601725791611493, 17.60172155949064, 17.601717327369787, 17.601713095248936, 17.601708863128085, 17.60170463100723, 17.60170039888638, 17.601696166765525, 17.601691934644673, 17.60168770252382, 17.601683470402968, 17.601679238282117, 17.601675006161262, 17.60167077404041, 17.601666541919556, 17.601662309798705, 17.60165807767785, 17.601653845557, 17.601649613436148, 17.601645381315294, 17.601641149194442, 17.601636917073588, 17.601632684952737, 17.601628452831882, 17.60162422071103], tracking: false)], participants: []),
                Race(name: "Race ABC", date: "2023-10-10 19:12:55", shortestTime: 690, shortestDistance: 12431, xCoords: [47.1986, 47.19704469885838], yCoords: [17.60286, 17.60162422071103], participants: []),
                Race(name: "Race XYZ", date: "2023-10-10 18:29:55", shortestTime: 490, shortestDistance: 9431, xCoords: [47.1986, 47.19704469885838], yCoords: [17.60286, 17.60162422071103], participants: [])
            ]
            for race in races {
                _ = try await Amplify.API.mutate(request: .create(race))
            }
        } catch let error as APIError {
            print("Failed to initRacesStartingData: \(error)")
        } catch {
            print("Unexpected error while calling create API : \(error)")
        }
    }

    func sendRaceRun() {
    }
}
